# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.sys.call
+alias org.eolang.threads.thread
+alias org.eolang.threads.sleep
+architect 28lev11@gmail.com
+home https://github.com/objectionary/eo-threads
+junit
+package org.eolang.threads
+version 0.0.2

[] > thread-returns-string
  thread "hello" > t
  seq > @
    t.started
    QQ.io.stdout
      QQ.txt.sprintf
        "t was started. You must wait after me\n"
    eq.
      "hello"
      join.
        t

[] > thread-returns-number
  thread 7 > t
  seq > @
    t.started
    QQ.io.stdout
      QQ.txt.sprintf
        "t was started. You must wait after me\n"
    eq.
      7
      join.
        t

[] > complex-argument
  thread > t
    5.plus
      5
  seq > @
    t.started
    eq.
      10
      join.
        t

[] > multiple
  QQ.threads.thread > a
    2.plus 2
  QQ.threads.thread > b
    1.plus 1
  seq > @
    a.started
    b.started
    eq.
      times.
        a.join
        b.join
      8

[] > divide-by-zero-in-thread
  thread > t
    1.div 0
  assert-that > @
    seq
      t.started
      try
        []
          t.join > @
        [e]
          e > @
        nop
    $.equal-to
      "The 1th argument of 'int.div' is invalid: division by zero is infinity"

[] > gettimeofday-returns-in-nanos
  memory 0 > start
  memory 0 > finish
  if. > @
    QQ.sys.uname.is-windows
    nop
    assert-that
      seq
        start.write
          call "gettimeofday"
        sleep 200
        finish.write
          call "gettimeofday"
        finish.minus start
      $.all-of
        $.less-than
          1000000
        $.greater-than
          100000

[] > parallel-sleep
  thread > t1
    sleep 300
  thread > t2
    sleep 300
  memory 0 > start
  memory 0 > finish
  if. > @
    QQ.sys.uname.is-windows
    nop
    assert-that
      seq
        start.write
          call "gettimeofday"
        t1.started
        t2.started
        t1.join
        t2.join
        finish.write
          call "gettimeofday"
        lt.
          finish.minus start
          600000
      $.equal-to TRUE

[] > thread-stops
  thread > t
    sleep 1000
  assert-that > @
    seq
      t.started
      t.stop
      try
        []
          t.join > @
        [e]
          e.slice > @
            0
            20
        nop
    $.equal-to
      "Cannot give dataized"

[] > is-running-after-stop
  thread > t
    sleep 10000
  assert-that > @
    seq
      t.started
      t.stop
      sleep 200
      t.is-running
    $.equal-to
      FALSE

[] > is-running-1
  thread > t
    TRUE
  assert-that > @
    t.is-running
    $.equal-to FALSE

[] > is-running-2
  thread > t
    sleep 300
  assert-that > @
    seq
      t.started
      t.is-running
    $.equal-to TRUE

[] > is-running-3
  thread > t
    sleep 50
  assert-that > @
    seq
      t.started
      t.join
      t.is-running
    $.equal-to FALSE

[] > is-running-after-started
  thread > t
    sleep 1000
  assert-that > @
    is-running.
      seq
        t.started
        t
    $.equal-to TRUE

[] > is-running-readme-example
  while. > @
    is-running.
      started.
        thread > t
          sleep 50000
    [i]
      seq > @
        QQ.io.stdout
          QQ.txt.sprintf
            "i = %d, still waiting...\n"
            i
        sleep 50
        if.
          i.gt 2
          t.stop
          TRUE

[] > twice-started
  thread > t
    sleep 300
  assert-that > @
    seq
      t.started
      t.started
      t.stop
    $.equal-to
      TRUE
